// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210216121431_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FormFactorId")
                        .HasColumnType("integer");

                    b.Property<int?>("PartId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("PartId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Domain.FormFactor", b =>
                {
                    b.Property<int>("FormFactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FormFactorName")
                        .HasColumnType("text");

                    b.HasKey("FormFactorId");

                    b.ToTable("FormFactors");
                });

            modelBuilder.Entity("Domain.GraphicsCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("ClockFreq")
                        .HasColumnType("double precision");

                    b.Property<bool>("CrossSli")
                        .HasColumnType("boolean");

                    b.Property<int>("Gb")
                        .HasColumnType("integer");

                    b.Property<int?>("PartId")
                        .HasColumnType("integer");

                    b.Property<string>("RamType")
                        .HasColumnType("text");

                    b.Property<bool>("Rgb")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("GraphicsCards");
                });

            modelBuilder.Entity("Domain.Motherboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Chipset")
                        .HasColumnType("text");

                    b.Property<int?>("FormFactorId")
                        .HasColumnType("integer");

                    b.Property<bool>("Oc")
                        .HasColumnType("boolean");

                    b.Property<int?>("PartId")
                        .HasColumnType("integer");

                    b.Property<int?>("RamTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("Rgb")
                        .HasColumnType("boolean");

                    b.Property<int?>("SocketId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("PartId");

                    b.HasIndex("RamTypeId");

                    b.HasIndex("SocketId");

                    b.ToTable("Motherboards");
                });

            modelBuilder.Entity("Domain.OperatingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("OpenSource")
                        .HasColumnType("boolean");

                    b.Property<int?>("PartId")
                        .HasColumnType("integer");

                    b.Property<double>("Size")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("OperatingSystems");
                });

            modelBuilder.Entity("Domain.Part", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<double>("Margin")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("double precision");

                    b.Property<double>("RetailPrice")
                        .HasColumnType("double precision");

                    b.HasKey("PartId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("Domain.PowerSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Modular")
                        .HasColumnType("boolean");

                    b.Property<int?>("PartId")
                        .HasColumnType("integer");

                    b.Property<int>("Power")
                        .HasColumnType("integer");

                    b.Property<string>("PowerRating")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("PowerSupplies");
                });

            modelBuilder.Entity("Domain.Processor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClockFreq")
                        .HasColumnType("integer");

                    b.Property<int>("Cores")
                        .HasColumnType("integer");

                    b.Property<bool>("Graph")
                        .HasColumnType("boolean");

                    b.Property<bool>("Oc")
                        .HasColumnType("boolean");

                    b.Property<int?>("PartId")
                        .HasColumnType("integer");

                    b.Property<int?>("SocketId")
                        .HasColumnType("integer");

                    b.Property<int>("Threads")
                        .HasColumnType("integer");

                    b.Property<int>("TurboFreq")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("SocketId");

                    b.ToTable("Processors");
                });

            modelBuilder.Entity("Domain.ProcessorCooler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("PartId")
                        .HasColumnType("integer");

                    b.Property<bool>("Rgb")
                        .HasColumnType("boolean");

                    b.Property<int?>("SocketId")
                        .HasColumnType("integer");

                    b.Property<bool>("Water")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("SocketId");

                    b.ToTable("ProcessorCoolers");
                });

            modelBuilder.Entity("Domain.Ram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClockFreq")
                        .HasColumnType("integer");

                    b.Property<int>("Gb")
                        .HasColumnType("integer");

                    b.Property<int?>("PartId")
                        .HasColumnType("integer");

                    b.Property<int?>("RamTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("Rgb")
                        .HasColumnType("boolean");

                    b.Property<int>("StickCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("RamTypeId");

                    b.ToTable("Rams");
                });

            modelBuilder.Entity("Domain.RamType", b =>
                {
                    b.Property<int>("RamTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("RamTypeName")
                        .HasColumnType("text");

                    b.HasKey("RamTypeId");

                    b.ToTable("RamTypes");
                });

            modelBuilder.Entity("Domain.Socket", b =>
                {
                    b.Property<int>("SocketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("SocketName")
                        .HasColumnType("text");

                    b.HasKey("SocketId");

                    b.ToTable("Sockets");
                });

            modelBuilder.Entity("Domain.StorageDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Gb")
                        .HasColumnType("integer");

                    b.Property<int?>("PartId")
                        .HasColumnType("integer");

                    b.Property<bool>("Ssd")
                        .HasColumnType("boolean");

                    b.Property<int>("Tb")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("StorageDevices");
                });

            modelBuilder.Entity("Domain.Case", b =>
                {
                    b.HasOne("Domain.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId");

                    b.HasOne("Domain.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");
                });

            modelBuilder.Entity("Domain.GraphicsCard", b =>
                {
                    b.HasOne("Domain.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");
                });

            modelBuilder.Entity("Domain.Motherboard", b =>
                {
                    b.HasOne("Domain.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId");

                    b.HasOne("Domain.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");

                    b.HasOne("Domain.RamType", "RamType")
                        .WithMany()
                        .HasForeignKey("RamTypeId");

                    b.HasOne("Domain.Socket", "Socket")
                        .WithMany()
                        .HasForeignKey("SocketId");
                });

            modelBuilder.Entity("Domain.OperatingSystem", b =>
                {
                    b.HasOne("Domain.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");
                });

            modelBuilder.Entity("Domain.PowerSupply", b =>
                {
                    b.HasOne("Domain.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");
                });

            modelBuilder.Entity("Domain.Processor", b =>
                {
                    b.HasOne("Domain.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");

                    b.HasOne("Domain.Socket", "Socket")
                        .WithMany()
                        .HasForeignKey("SocketId");
                });

            modelBuilder.Entity("Domain.ProcessorCooler", b =>
                {
                    b.HasOne("Domain.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");

                    b.HasOne("Domain.Socket", "Socket")
                        .WithMany()
                        .HasForeignKey("SocketId");
                });

            modelBuilder.Entity("Domain.Ram", b =>
                {
                    b.HasOne("Domain.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");

                    b.HasOne("Domain.RamType", "RamType")
                        .WithMany()
                        .HasForeignKey("RamTypeId");
                });

            modelBuilder.Entity("Domain.StorageDevice", b =>
                {
                    b.HasOne("Domain.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");
                });
#pragma warning restore 612, 618
        }
    }
}
